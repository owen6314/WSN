/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'SensorMsg'
 * message type.
 */

public class SensorMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 10;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = -1;

    /** Create a new SensorMsg of size 10. */
    public SensorMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new SensorMsg of the given data_length. */
    public SensorMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SensorMsg with the given data_length
     * and base offset.
     */
    public SensorMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SensorMsg using the given byte array
     * as backing store.
     */
    public SensorMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SensorMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public SensorMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SensorMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public SensorMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SensorMsg embedded in the given message
     * at the given base offset.
     */
    public SensorMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SensorMsg embedded in the given message
     * at the given base offset and length.
     */
    public SensorMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <SensorMsg> \n";
      try {
        s += "  [node_id=0x"+Long.toHexString(get_node_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [sequence_number=0x"+Long.toHexString(get_sequence_number())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [temperature=0x"+Long.toHexString(get_temperature())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [humidity=0x"+Long.toHexString(get_humidity())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [light_intensity=0x"+Long.toHexString(get_light_intensity())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: node_id
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'node_id' is signed (false).
     */
    public static boolean isSigned_node_id() {
        return false;
    }

    /**
     * Return whether the field 'node_id' is an array (false).
     */
    public static boolean isArray_node_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'node_id'
     */
    public static int offset_node_id() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'node_id'
     */
    public static int offsetBits_node_id() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'node_id'
     */
    public int get_node_id() {
        return (int)getUIntBEElement(offsetBits_node_id(), 16);
    }

    /**
     * Set the value of the field 'node_id'
     */
    public void set_node_id(int value) {
        setUIntBEElement(offsetBits_node_id(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'node_id'
     */
    public static int size_node_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'node_id'
     */
    public static int sizeBits_node_id() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: sequence_number
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'sequence_number' is signed (false).
     */
    public static boolean isSigned_sequence_number() {
        return false;
    }

    /**
     * Return whether the field 'sequence_number' is an array (false).
     */
    public static boolean isArray_sequence_number() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'sequence_number'
     */
    public static int offset_sequence_number() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'sequence_number'
     */
    public static int offsetBits_sequence_number() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'sequence_number'
     */
    public int get_sequence_number() {
        return (int)getUIntBEElement(offsetBits_sequence_number(), 16);
    }

    /**
     * Set the value of the field 'sequence_number'
     */
    public void set_sequence_number(int value) {
        setUIntBEElement(offsetBits_sequence_number(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'sequence_number'
     */
    public static int size_sequence_number() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'sequence_number'
     */
    public static int sizeBits_sequence_number() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: temperature
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'temperature' is signed (false).
     */
    public static boolean isSigned_temperature() {
        return false;
    }

    /**
     * Return whether the field 'temperature' is an array (false).
     */
    public static boolean isArray_temperature() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'temperature'
     */
    public static int offset_temperature() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'temperature'
     */
    public static int offsetBits_temperature() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'temperature'
     */
    public int get_temperature() {
        return (int)getUIntBEElement(offsetBits_temperature(), 16);
    }

    /**
     * Set the value of the field 'temperature'
     */
    public void set_temperature(int value) {
        setUIntBEElement(offsetBits_temperature(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'temperature'
     */
    public static int size_temperature() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'temperature'
     */
    public static int sizeBits_temperature() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: humidity
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'humidity' is signed (false).
     */
    public static boolean isSigned_humidity() {
        return false;
    }

    /**
     * Return whether the field 'humidity' is an array (false).
     */
    public static boolean isArray_humidity() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'humidity'
     */
    public static int offset_humidity() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'humidity'
     */
    public static int offsetBits_humidity() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'humidity'
     */
    public int get_humidity() {
        return (int)getUIntBEElement(offsetBits_humidity(), 16);
    }

    /**
     * Set the value of the field 'humidity'
     */
    public void set_humidity(int value) {
        setUIntBEElement(offsetBits_humidity(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'humidity'
     */
    public static int size_humidity() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'humidity'
     */
    public static int sizeBits_humidity() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: light_intensity
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'light_intensity' is signed (false).
     */
    public static boolean isSigned_light_intensity() {
        return false;
    }

    /**
     * Return whether the field 'light_intensity' is an array (false).
     */
    public static boolean isArray_light_intensity() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'light_intensity'
     */
    public static int offset_light_intensity() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'light_intensity'
     */
    public static int offsetBits_light_intensity() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'light_intensity'
     */
    public int get_light_intensity() {
        return (int)getUIntBEElement(offsetBits_light_intensity(), 16);
    }

    /**
     * Set the value of the field 'light_intensity'
     */
    public void set_light_intensity(int value) {
        setUIntBEElement(offsetBits_light_intensity(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'light_intensity'
     */
    public static int size_light_intensity() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'light_intensity'
     */
    public static int sizeBits_light_intensity() {
        return 16;
    }

}
